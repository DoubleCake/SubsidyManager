# ui.py
from PyQt5.QtWidgets import (QApplication, QMainWindow, QTabWidget, QWidget, QVBoxLayout, QHBoxLayout,
                             QLabel, QLineEdit, QPushButton, QTableWidget, QTableWidgetItem, QComboBox,
                             QDateEdit, QMessageBox, QHeaderView, QFormLayout, QGroupBox, QSplitter)
from PyQt5.QtCore import Qt, QDate
from PyQt5.QtGui import QFont, QIcon
from services import FamilyService, PersonService, LandService, SubsidyService, ReportService
from database import init_database

class FamilySubsidySystem(QMainWindow):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("家庭补贴管理系统")
        self.setGeometry(100, 100, 1200, 800)
        
        # 尝试设置图标
        try:
            self.setWindowIcon(QIcon("resources/family_icon.png"))
        except:
            pass
        
        # 初始化数据库
        self.db_path = "family_subsidies.db"
        init_database(self.db_path)
        
        # 初始化服务
        self.family_service = FamilyService()
        self.person_service = PersonService()
        self.land_service = LandService()
        self.subsidy_service = SubsidyService()
        self.report_service = ReportService()
        
        # 创建主界面
        self.create_main_ui()
        
        # 加载初始数据
        self.load_families()
        self.load_subsidy_types()
    
    def create_main_ui(self):
        """创建主界面"""
        # 创建主选项卡
        self.tabs = QTabWidget()
        self.setCentralWidget(self.tabs)
        
        # 添加各功能选项卡
        self.family_tab = self.create_family_tab()
        self.person_tab = self.create_person_tab()
        self.land_tab = self.create_land_tab()
        self.subsidy_tab = self.create_subsidy_tab()
        self.report_tab = self.create_report_tab()
        
        self.tabs.addTab(self.family_tab, "家庭管理")
        self.tabs.addTab(self.person_tab, "人员管理")
        self.tabs.addTab(self.land_tab, "用地管理")
        self.tabs.addTab(self.subsidy_tab, "补贴管理")
        self.tabs.addTab(self.report_tab, "报表统计")
        
        # 状态栏
        self.statusBar().showMessage("就绪 | 家庭补贴管理系统 v1.0")
    
    def create_family_tab(self):
        """创建家庭管理选项卡"""
        tab = QWidget()
        layout = QVBoxLayout()
        
        # 家庭管理表单
        form_group = QGroupBox("添加/编辑家庭")
        form_layout = QFormLayout()
        
        self.family_id_input = QLineEdit()
        self.family_id_input.setPlaceholderText("输入家庭ID")
        form_layout.addRow("家庭ID:", self.family_id_input)
        
        self.family_create_date = QDateEdit()
        self.family_create_date.setDate(QDate.currentDate())
        self.family_create_date.setCalendarPopup(True)
        form_layout.addRow("创建日期:", self.family_create_date)
        
        btn_layout = QHBoxLayout()
        self.add_family_btn = QPushButton("添加家庭")
        self.add_family_btn.clicked.connect(self.add_family)
        self.update_family_btn = QPushButton("更新信息")
        self.update_family_btn.clicked.connect(self.update_family)
        self.delete_family_btn = QPushButton("删除家庭")
        self.delete_family_btn.clicked.connect(self.delete_family)
        
        btn_layout.addWidget(self.add_family_btn)
        btn_layout.addWidget(self.update_family_btn)
        btn_layout.addWidget(self.delete_family_btn)
        
        form_layout.addRow(btn_layout)
        form_group.setLayout(form_layout)
        
        # 家庭列表表格
        table_group = QGroupBox("家庭列表")
        table_layout = QVBoxLayout()
        
        self.family_table = QTableWidget()
        self.family_table.setColumnCount(3)
        self.family_table.setHorizontalHeaderLabels(["家庭ID", "创建日期", "成员数量"])
        self.family_table.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)
        self.family_table.setSelectionBehavior(QTableWidget.SelectRows)
        self.family_table.setSelectionMode(QTableWidget.SingleSelection)
        self.family_table.cellClicked.connect(self.family_selected)
        
        table_layout.addWidget(self.family_table)
        table_group.setLayout(table_layout)
        
        # 组合布局
        splitter = QSplitter(Qt.Vertical)
        splitter.addWidget(form_group)
        splitter.addWidget(table_group)
        splitter.setSizes([200, 400])
        
        layout.addWidget(splitter)
        tab.setLayout(layout)
        return tab
    
    def create_person_tab(self):
        """创建人员管理选项卡"""
        tab = QWidget()
        layout = QVBoxLayout()
        
        # 人员管理表单
        form_group = QGroupBox("添加/编辑人员")
        form_layout = QFormLayout()
        
        self.person_family_combo = QComboBox()
        self.person_family_combo.setMinimumWidth(200)
        form_layout.addRow("所属家庭:", self.person_family_combo)
        
        self.person_id_input = QLineEdit()
        self.person_id_input.setPlaceholderText("身份证号")
        form_layout.addRow("身份证号:", self.person_id_input)
        
        self.person_name_input = QLineEdit()
        self.person_name_input.setPlaceholderText("姓名")
        form_layout.addRow("姓名:", self.person_name_input)
        
        self.person_phone_input = QLineEdit()
        self.person_phone_input.setPlaceholderText("联系电话")
        form_layout.addRow("电话:", self.person_phone_input)
        
        self.person_card_check = QComboBox()
        self.person_card_check.addItems(["无社保卡", "有社保卡"])
        form_layout.addRow("社保卡:", self.person_card_check)
        
        self.person_head_check = QComboBox()
        self.person_head_check.addItems(["否", "是"])
        form_layout.addRow("是否户主:", self.person_head_check)
        
        btn_layout = QHBoxLayout()
        self.add_person_btn = QPushButton("添加人员")
        self.add_person_btn.clicked.connect(self.add_person)
        self.update_person_btn = QPushButton("更新信息")
        self.update_person_btn.clicked.connect(self.update_person)
        self.delete_person_btn = QPushButton("删除人员")
        self.delete_person_btn.clicked.connect(self.delete_person)
        
        btn_layout.addWidget(self.add_person_btn)
        btn_layout.addWidget(self.update_person_btn)
        btn_layout.addWidget(self.delete_person_btn)
        
        form_layout.addRow(btn_layout)
        form_group.setLayout(form_layout)
        
        # 人员列表表格
        table_group = QGroupBox("人员列表")
        table_layout = QVBoxLayout()
        
        self.person_table = QTableWidget()
        self.person_table.setColumnCount(6)
        self.person_table.setHorizontalHeaderLabels(["身份证号", "姓名", "家庭ID", "电话", "社保卡", "户主"])
        self.person_table.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)
        self.person_table.setSelectionBehavior(QTableWidget.SelectRows)
        self.person_table.setSelectionMode(QTableWidget.SingleSelection)
        self.person_table.cellClicked.connect(self.person_selected)
        
        table_layout.addWidget(self.person_table)
        table_group.setLayout(table_layout)
        
        # 组合布局
        splitter = QSplitter(Qt.Vertical)
        splitter.addWidget(form_group)
        splitter.addWidget(table_group)
        splitter.setSizes([300, 400])
        
        layout.addWidget(splitter)
        tab.setLayout(layout)
        return tab
    
    def create_land_tab(self):
        """创建用地管理选项卡"""
        tab = QWidget()
        layout = QVBoxLayout()
        
        # 用地管理表单
        form_group = QGroupBox("添加/编辑用地")
        form_layout = QFormLayout()
        
        self.land_family_combo = QComboBox()
        self.land_family_combo.setMinimumWidth(200)
        form_layout.addRow("所属家庭:", self.land_family_combo)
        
        self.land_area_input = QLineEdit()
        self.land_area_input.setPlaceholderText("面积（亩）")
        form_layout.addRow("面积:", self.land_area_input)
        
        self.land_type_combo = QComboBox()
        self.land_type_combo.addItems(["承包种植地", "自留地", "林地"])
        form_layout.addRow("用地类型:", self.land_type_combo)
        
        self.land_year_input = QLineEdit()
        self.land_year_input.setPlaceholderText("年份")
        self.land_year_input.setText(str(date.today().year))
        form_layout.addRow("所属年份:", self.land_year_input)
        
        btn_layout = QHBoxLayout()
        self.add_land_btn = QPushButton("添加用地")
        self.add_land_btn.clicked.connect(self.add_land)
        self.update_land_btn = QPushButton("更新信息")
        self.update_land_btn.clicked.connect(self.update_land)
        self.delete_land_btn = QPushButton("删除用地")
        self.delete_land_btn.clicked.connect(self.delete_land)
        
        btn_layout.addWidget(self.add_land_btn)
        btn_layout.addWidget(self.update_land_btn)
        btn_layout.addWidget(self.delete_land_btn)
        
        form_layout.addRow(btn_layout)
        form_group.setLayout(form_layout)
        
        # 用地列表表格
        table_group = QGroupBox("用地列表")
        table_layout = QVBoxLayout()
        
        self.land_table = QTableWidget()
        self.land_table.setColumnCount(5)
        self.land_table.setHorizontalHeaderLabels(["ID", "家庭ID", "面积(亩)", "类型", "年份"])
        self.land_table.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)
        self.land_table.setSelectionBehavior(QTableWidget.SelectRows)
        self.land_table.setSelectionMode(QTableWidget.SingleSelection)
        self.land_table.cellClicked.connect(self.land_selected)
        
        table_layout.addWidget(self.land_table)
        table_group.setLayout(table_layout)
        
        # 组合布局
        splitter = QSplitter(Qt.Vertical)
        splitter.addWidget(form_group)
        splitter.addWidget(table_group)
        splitter.setSizes([200, 400])
        
        layout.addWidget(splitter)
        tab.setLayout(layout)
        return tab
    
    def create_subsidy_tab(self):
        """创建补贴管理选项卡"""
        tab = QWidget()
        layout = QVBoxLayout()
        
        # 补贴类型管理
        type_group = QGroupBox("补贴类型管理")
        type_layout = QVBoxLayout()
        
        type_form = QHBoxLayout()
        self.subsidy_id_input = QLineEdit()
        self.subsidy_id_input.setPlaceholderText("补贴ID")
        type_form.addWidget(QLabel("ID:"))
        type_form.addWidget(self.subsidy_id_input)
        
        self.subsidy_name_input = QLineEdit()
        self.subsidy_name_input.setPlaceholderText("补贴名称")
        type_form.addWidget(QLabel("名称:"))
        type_form.addWidget(self.subsidy_name_input)
        
        self.subsidy_amount_input = QLineEdit()
        self.subsidy_amount_input.setPlaceholderText("单位金额")
        type_form.addWidget(QLabel("单位金额:"))
        type_form.addWidget(self.subsidy_amount_input)
        
        type_layout.addLayout(type_form)
        
        btn_layout = QHBoxLayout()
        self.add_subsidy_type_btn = QPushButton("添加类型")
        self.add_subsidy_type_btn.clicked.connect(self.add_subsidy_type)
        self.update_subsidy_type_btn = QPushButton("更新类型")
        self.update_subsidy_type_btn.clicked.connect(self.update_subsidy_type)
        self.delete_subsidy_type_btn = QPushButton("删除类型")
        self.delete_subsidy_type_btn.clicked.connect(self.delete_subsidy_type)
        
        btn_layout.addWidget(self.add_subsidy_type_btn)
        btn_layout.addWidget(self.update_subsidy_type_btn)
        btn_layout.addWidget(self.delete_subsidy_type_btn)
        
        type_layout.addLayout(btn_layout)
        
        # 补贴类型表格
        self.subsidy_type_table = QTableWidget()
        self.subsidy_type_table.setColumnCount(5)
        self.subsidy_type_table.setHorizontalHeaderLabels(["ID", "名称", "单位金额", "是否互斥", "可多次领取"])
        self.subsidy_type_table.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)
        self.subsidy_type_table.setSelectionBehavior(QTableWidget.SelectRows)
        self.subsidy_type_table.setSelectionMode(QTableWidget.SingleSelection)
        self.subsidy_type_table.cellClicked.connect(self.subsidy_type_selected)
        
        type_layout.addWidget(self.subsidy_type_table)
        type_group.setLayout(type_layout)
        
        # 补贴发放管理
        grant_group = QGroupBox("补贴发放管理")
        grant_layout = QFormLayout()
        
        self.grant_person_combo = QComboBox()
        grant_layout.addRow("领取人员:", self.grant_person_combo)
        
        self.grant_subsidy_combo = QComboBox()
        grant_layout.addRow("补贴类型:", self.grant_subsidy_combo)
        
        self.grant_land_combo = QComboBox()
        grant_layout.addRow("关联用地:", self.grant_land_combo)
        
        self.grant_area_input = QLineEdit()
        self.grant_area_input.setPlaceholderText("申请面积（亩）")
        grant_layout.addRow("申请面积:", self.grant_area_input)
        
        self.grant_year_input = QLineEdit()
        self.grant_year_input.setPlaceholderText("年份")
        self.grant_year_input.setText(str(date.today().year))
        grant_layout.addRow("补贴年份:", self.grant_year_input)
        
        self.grant_method_combo = QComboBox()
        self.grant_method_combo.addItems(["社保卡", "银行卡", "现金"])
        grant_layout.addRow("支付方式:", self.grant_method_combo)
        
        self.grant_btn = QPushButton("发放补贴")
        self.grant_btn.clicked.connect(self.grant_subsidy)
        grant_layout.addRow(self.grant_btn)
        
        grant_group.setLayout(grant_layout)
        
        # 组合布局
        splitter = QSplitter(Qt.Vertical)
        splitter.addWidget(type_group)
        splitter.addWidget(grant_group)
        splitter.setSizes([400, 300])
        
        layout.addWidget(splitter)
        tab.setLayout(layout)
        return tab
    
    def create_report_tab(self):
        """创建报表统计选项卡"""
        tab = QWidget()
        layout = QVBoxLayout()
        
        # 报表选择
        report_select = QHBoxLayout()
        report_select.addWidget(QLabel("选择家庭:"))
        
        self.report_family_combo = QComboBox()
        self.report_family_combo.setMinimumWidth(200)
        report_select.addWidget(self.report_family_combo)
        
        report_select.addWidget(QLabel("选择年份:"))
        
        self.report_year_combo = QComboBox()
        current_year = date.today().year
        for year in range(current_year-5, current_year+1):
            self.report_year_combo.addItem(str(year))
        self.report_year_combo.setCurrentText(str(current_year))
        report_select.addWidget(self.report_year_combo)
        
        self.generate_report_btn = QPushButton("生成报表")
        self.generate_report_btn.clicked.connect(self.generate_report)
        report_select.addWidget(self.generate_report_btn)
        
        layout.addLayout(report_select)
        
        # 报表显示区域
        self.report_table = QTableWidget()
        self.report_table.setColumnCount(6)
        self.report_table.setHorizontalHeaderLabels(["领取人", "补贴类型", "用地类型", "面积(亩)", "金额", "支付方式"])
        self.report_table.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)
        
        layout.addWidget(self.report_table)
        
        # 统计摘要
        summary_group = QGroupBox("统计摘要")
        summary_layout = QHBoxLayout()
        
        self.total_area_label = QLabel("总面积: 0 亩")
        self.total_area_label.setFont(QFont("Arial", 12, QFont.Bold))
        
        self.total_amount_label = QLabel("总金额: 0 元")
        self.total_amount_label.setFont(QFont("Arial", 12, QFont.Bold))
        
        self.average_amount_label = QLabel("人均补贴: 0 元")
        self.average_amount_label.setFont(QFont("Arial", 12, QFont.Bold))
        
        summary_layout.addWidget(self.total_area_label)
        summary_layout.addWidget(self.total_amount_label)
        summary_layout.addWidget(self.average_amount_label)
        
        summary_group.setLayout(summary_layout)
        layout.addWidget(summary_group)
        
        tab.setLayout(layout)
        return tab
    
    # 数据加载方法
    def load_families(self):
        """加载家庭数据"""
        families = self.family_service.get_families()
        if families:
            self.family_table.setRowCount(len(families))
            for i, family in enumerate(families):
                member_count = self.family_service.family_dao.get_member_count(family[0])
                
                self.family_table.setItem(i, 0, QTableWidgetItem(family[0]))
                self.family_table.setItem(i, 1, QTableWidgetItem(family[1]))
                self.family_table.setItem(i, 2, QTableWidgetItem(str(member_count)))
        
        # 更新所有家庭下拉框
        self.person_family_combo.clear()
        self.land_family_combo.clear()
        self.report_family_combo.clear()
        for family in families:
            self.person_family_combo.addItem(family[0])
            self.land_family_combo.addItem(family[0])
            self.report_family_combo.addItem(family[0])
    
    def load_persons(self, family_id=None):
        """加载人员数据"""
        persons = self.person_service.get_family_members(family_id) if family_id else self.person_service.person_dao.get_persons()
        
        if persons:
            self.person_table.setRowCount(len(persons))
            for i, person in enumerate(persons):
                self.person_table.setItem(i, 0, QTableWidgetItem(person[0]))
                self.person_table.setItem(i, 1, QTableWidgetItem(person[2]))
                self.person_table.setItem(i, 2, QTableWidgetItem(person[1]))
                self.person_table.setItem(i, 3, QTableWidgetItem(person[3] if person[3] else ""))
                self.person_table.setItem(i, 4, QTableWidgetItem("是" if person[4] else "否"))
                self.person_table.setItem(i, 5, QTableWidgetItem("是" if person[5] else "否"))
    
    def load_lands(self, family_id=None):
        """加载用地数据"""
        lands = self.land_service.get_family_lands(family_id) if family_id else self.land_service.land_dao.get_lands()
        
        if lands:
            self.land_table.setRowCount(len(lands))
            for i, land in enumerate(lands):
                self.land_table.setItem(i, 0, QTableWidgetItem(str(land[0])))
                self.land_table.setItem(i, 1, QTableWidgetItem(land[1]))
                self.land_table.setItem(i, 2, QTableWidgetItem(str(land[2])))
                self.land_table.setItem(i, 3, QTableWidgetItem(land[3]))
                self.land_table.setItem(i, 4, QTableWidgetItem(str(land[4])))
    
    def load_subsidy_types(self):
        """加载补贴类型数据"""
        types = self.subsidy_service.get_subsidy_types()
        if types:
            self.subsidy_type_table.setRowCount(len(types))
            for i, subsidy in enumerate(types):
                self.subsidy_type_table.setItem(i, 0, QTableWidgetItem(subsidy[0]))
                self.subsidy_type_table.setItem(i, 1, QTableWidgetItem(subsidy[1]))
                self.subsidy_type_table.setItem(i, 2, QTableWidgetItem(str(subsidy[6])))
                self.subsidy_type_table.setItem(i, 3, QTableWidgetItem("是" if subsidy[4] else "否"))
                self.subsidy_type_table.setItem(i, 4, QTableWidgetItem("是" if subsidy[5] else "否"))
                
                # 添加到补贴发放下拉框
                self.grant_subsidy_combo.addItem(f"{subsidy[0]} - {subsidy[1]}")
    
    # 事件处理方法
    def family_selected(self, row, column):
        """家庭被选中"""
        family_id = self.family_table.item(row, 0).text()
        self.family_id_input.setText(family_id)
        
        # 加载家庭成员
        self.load_persons(family_id)
        self.load_lands(family_id)
    
    def person_selected(self, row, column):
        """人员被选中"""
        person_id = self.person_table.item(row, 0).text()
        family_id = self.person_table.item(row, 2).text()
        name = self.person_table.item(row, 1).text()
        phone = self.person_table.item(row, 3).text()
        has_card = self.person_table.item(row, 4).text() == "是"
        is_head = self.person_table.item(row, 5).text() == "是"
        
        # 设置表单
        self.person_id_input.setText(person_id)
        self.person_name_input.setText(name)
        self.person_phone_input.setText(phone if phone else "")
        self.person_card_check.setCurrentIndex(1 if has_card else 0)
        self.person_head_check.setCurrentIndex(1 if is_head else 0)
        
        # 设置家庭下拉框
        index = self.person_family_combo.findText(family_id)
        if index >= 0:
            self.person_family_combo.setCurrentIndex(index)
    
    def land_selected(self, row, column):
        """用地被选中"""
        land_id = self.land_table.item(row, 0).text()
        family_id = self.land_table.item(row, 1).text()
        area = self.land_table.item(row, 2).text()
        land_type = self.land_table.item(row, 3).text()
        year = self.land_table.item(row, 4).text()
        
        # 设置表单
        self.land_area_input.setText(area)
        self.land_year_input.setText(year)
        
        # 设置家庭下拉框
        index = self.land_family_combo.findText(family_id)
        if index >= 0:
            self.land_family_combo.setCurrentIndex(index)
        
        # 设置类型下拉框
        index = self.land_type_combo.findText(land_type)
        if index >= 0:
            self.land_type_combo.setCurrentIndex(index)
    
    def subsidy_type_selected(self, row, column):
        """补贴类型被选中"""
        subsidy_id = self.subsidy_type_table.item(row, 0).text()
        name = self.subsidy_type_table.item(row, 1).text()
        amount = self.subsidy_type_table.item(row, 2).text()
        
        # 设置表单
        self.subsidy_id_input.setText(subsidy_id)
        self.subsidy_name_input.setText(name)
        self.subsidy_amount_input.setText(amount)
    
    # 添加/更新/删除方法
    def add_family(self):
        """添加家庭"""
        family_id = self.family_id_input.text().strip()
        if not family_id:
            QMessageBox.warning(self, "输入错误", "家庭ID不能为空")
            return
        
        create_date = self.family_create_date.date().toString("yyyy-MM-dd")
        
        if self.family_service.create_family(family_id):
            self.load_families()
            self.family_id_input.clear()
            QMessageBox.information(self, "成功", "家庭添加成功")
        else:
            QMessageBox.warning(self, "错误", "家庭添加失败，可能ID已存在")
    
    def update_family(self):
        """更新家庭信息"""
        family_id = self.family_id_input.text().strip()
        if not family_id:
            QMessageBox.warning(self, "输入错误", "请选择要更新的家庭")
            return
        
        create_date = self.family_create_date.date().toString("yyyy-MM-dd")
        
        if self.family_service.family_dao.update_family(family_id, create_date):
            self.load_families()
            QMessageBox.information(self, "成功", "家庭信息更新成功")
        else:
            QMessageBox.warning(self, "错误", "家庭信息更新失败")
    
    def delete_family(self):
        """删除家庭"""
        family_id = self.family_id_input.text().strip()
        if not family_id:
            QMessageBox.warning(self, "输入错误", "请选择要删除的家庭")
            return
        
        reply = QMessageBox.question(
            self, "确认删除", 
            f"确定要删除家庭 {family_id} 及其所有成员和用地记录吗？",
            QMessageBox.Yes | QMessageBox.No
        )
        
        if reply == QMessageBox.Yes:
            if self.family_service.delete_family(family_id):
                self.load_families()
                self.family_id_input.clear()
                self.person_table.setRowCount(0)
                self.land_table.setRowCount(0)
                QMessageBox.information(self, "成功", "家庭删除成功")
            else:
                QMessageBox.warning(self, "错误", "家庭删除失败")
    
    # 其他添加/更新/删除方法的实现类似，限于篇幅省略
    # 实际实现中需要完整实现所有方法
    
    def grant_subsidy(self):
        """发放补贴"""
        # 获取人员ID（格式为 "身份证号 - 姓名"）
        person_text = self.grant_person_combo.currentText()
        if " - " not in person_text:
            QMessageBox.warning(self, "错误", "请选择有效的人员")
            return
        person_id = person_text.split(" - ")[0]
        
        # 获取补贴ID
        subsidy_text = self.grant_subsidy_combo.currentText()
        if " - " not in subsidy_text:
            QMessageBox.warning(self, "错误", "请选择有效的补贴类型")
            return
        subsidy_id = subsidy_text.split(" - ")[0]
        
        # 获取用地ID
        land_text = self.grant_land_combo.currentText()
        if " - " not in land_text:
            QMessageBox.warning(self, "错误", "请选择有效的用地")
            return
        land_id = land_text.split(" - ")[0]
        
        try:
            applied_area = float(self.grant_area_input.text().strip())
            year = int(self.grant_year_input.text().strip())
        except:
            QMessageBox.warning(self, "输入错误", "请填写有效的面积和年份")
            return
        
        payment_method = self.grant_method_combo.currentText()
        
        # 发放补贴
        if self.subsidy_service.grant_subsidy(
            person_id, subsidy_id, applied_area, land_id, year, 
            payment_method=payment_method
        ):
            QMessageBox.information(self, "成功", "补贴发放成功")
        else:
            QMessageBox.warning(self, "错误", "补贴发放失败")
    
    def generate_report(self):
        """生成报表"""
        family_id = self.report_family_combo.currentText()
        year = int(self.report_year_combo.currentText())
        
        report = self.report_service.generate_family_report(family_id, year)
        
        if report['subsidies']:
            self.report_table.setRowCount(len(report['subsidies']))
            for i, record in enumerate(report['subsidies']):
                self.report_table.setItem(i, 0, QTableWidgetItem(record[9]))  # p.name
                self.report_table.setItem(i, 1, QTableWidgetItem(record[10]))  # s.name
                self.report_table.setItem(i, 2, QTableWidgetItem(record[11]))  # l.land_type
                self.report_table.setItem(i, 3, QTableWidgetItem(str(record[5])))  # applied_area
                self.report_table.setItem(i, 4, QTableWidgetItem(str(record[6])))  # total_amount
                self.report_table.setItem(i, 5, QTableWidgetItem(record[7] if record[7] else ""))  # payment_method
            
            # 更新统计摘要
            self.total_area_label.setText(f"总面积: {report['total_area']:.2f} 亩")
            self.total_amount_label.setText(f"总金额: {report['total_amount']:.2f} 元")
            self.average_amount_label.setText(f"人均补贴: {report['average_amount']:.2f} 元")
        else:
            self.report_table.setRowCount(0)
            self.total_area_label.setText("总面积: 0 亩")
            self.total_amount_label.setText("总金额: 0 元")
            self.average_amount_label.setText("人均补贴: 0 元")
            QMessageBox.information(self, "提示", "该家庭在选定年份没有补贴记录")